<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DaanV2.Essentials.Net</name>
    </assembly>
    <members>
        <member name="T:DaanV2.Builders.IBuilderAddContext`2">
            <summary>A subpart of a <see cref="T:DaanV2.Builders.IBuilder`2"/> that specifies if a different object can be added with context.</summary>
        </member>
        <member name="M:DaanV2.Builders.IBuilderAddContext`2.Add(`0,`1)">
            <summary>Adds the specific object to the build.</summary>
            <param name="O">The object to check if it can be added.</param>
            <param name="Context">The relevant context needed to possibly help identify the object.</param>
        </member>
        <member name="T:DaanV2.Builders.IBuilderAdd`1">
            <summary>A subpart of a <see cref="T:DaanV2.Builders.IBuilder`2"/> that specifies if a different object can be added.</summary>
        </member>
        <member name="M:DaanV2.Builders.IBuilderAdd`1.Add(`0)">
            <summary>Adds the specific object to the build.</summary>
            <param name="O">The object to check if it can be added.</param>
        </member>
        <member name="M:DaanV2.Builders.IBuilderAdd`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds the specific object to the build.</summary>
            <param name="values">The objects to check if it can be added.</param>
        </member>
        <member name="T:DaanV2.Builders.IBuilderContext`3">
            <summary>The interface that responsible for building a specified class with/without context.</summary>
            <typeparam name="TypeToBuild">The type to build to.</typeparam>
            <typeparam name="TIn">The object type in.</typeparam>
            <typeparam name="ContextType">The context type.</typeparam>
        </member>
        <member name="T:DaanV2.Builders.IBuilder`2">
            <summary>The interfacethat is responsible for forming the contract between builders and output types.</summary>
            <typeparam name="TypeToBuild">The output type that will be build.</typeparam>
            <typeparam name="TIn">The type that can be added into the build.</typeparam>
        </member>
        <member name="M:DaanV2.Builders.IBuilder`2.SetBase(`0)">
            <summary>Set the base object of this builder to work on.</summary>
            <param name="Base">The base object.</param>
        </member>
        <member name="M:DaanV2.Builders.IBuilder`2.BuildFinal">
            <summary>Returns the builded version of the specified.</summary>
            <returns>Returns the builded version of the specified.</returns>
        </member>
        <member name="T:DaanV2.PriorityAttributeComparer">
            <summary>A comparer of objects that implements the <see cref="T:DaanV2.PriorityAttribute"/> and by it.</summary>
        </member>
        <member name="M:DaanV2.PriorityAttributeComparer.Compare(System.Object,System.Object)">
            <summary>Compares two object to each other, retrieves the priority attribute from them.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>Compares two object to each other, retrieves the priority attribute from them.</returns>
        </member>
        <member name="M:DaanV2.PriorityAttributeComparer.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.PriorityAttributeComparer"/>.</summary>
        </member>
        <member name="T:DaanV2.PriorityAttribute">
            <summary> add description for class: PriorityAttribute.</summary>
        </member>
        <member name="M:DaanV2.PriorityAttribute.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.PriorityAttribute"/>.</summary>
        </member>
        <member name="M:DaanV2.PriorityAttribute.#ctor(System.Int32)">
            <summary>Creates a new instance of <see cref="T:DaanV2.PriorityAttribute"/>.</summary>
            <param name="Value">The value to assign.</param>
        </member>
        <member name="P:DaanV2.PriorityAttribute.TypeId">
            <summary>When implemented in a derived class, gets a unique identifier for this attribute.</summary>
        </member>
        <member name="M:DaanV2.PriorityAttribute.Equals(System.Object)">
            <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
            <param name="obj">The object to check against.</param>
            <returns>Returns a value that indicates whether this instance is equal to a specified object.</returns>
        </member>
        <member name="M:DaanV2.PriorityAttribute.Match(System.Object)">
            <summary>Check if this attribute matches the specified <see cref="T:System.Object"/>.</summary>
            <param name="obj">The object to compare to.</param>
            <returns>Check if this attribute matches the specified <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:DaanV2.PriorityAttribute.ToString">
            <summary>Returns a string that represents this object.</summary>
            <returns>Returns a string that represents this object.</returns>
        </member>
        <member name="M:DaanV2.PriorityAttribute.Equals(DaanV2.PriorityAttribute)">
            <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
            <param name="other">The object to check against.</param>
            <returns>Returns a value that indicates whether this instance is equal to a specified object.</returns>
        </member>
        <member name="M:DaanV2.PriorityAttribute.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:DaanV2.PriorityAttribute.op_Equality(DaanV2.PriorityAttribute,DaanV2.PriorityAttribute)">
            <summary>Compare two <see cref="T:DaanV2.PriorityAttribute"/> if they are equal to each other.</summary>
            <param name="left">The first <see cref="T:DaanV2.PriorityAttribute"/> to check.</param>
            <param name="right">The second <see cref="T:DaanV2.PriorityAttribute"/> to check.</param>
            <returns>Compare two <see cref="T:DaanV2.PriorityAttribute"/> if they are equal to each other.</returns>
        </member>
        <member name="M:DaanV2.PriorityAttribute.op_Inequality(DaanV2.PriorityAttribute,DaanV2.PriorityAttribute)">
            <summary>Compare two <see cref="T:DaanV2.PriorityAttribute"/> if they are not equal to each other.</summary>
            <param name="left">The first <see cref="T:DaanV2.PriorityAttribute"/> to check.</param>
            <param name="right">The second <see cref="T:DaanV2.PriorityAttribute"/> to check.</param>
            <returns>Compare two <see cref="T:DaanV2.PriorityAttribute"/> if they are not equal to each other.</returns>
        </member>
        <member name="P:DaanV2.PriorityAttribute.Value">
            <summary>Get or sets the value this priority has.</summary>
        </member>
        <member name="F:DaanV2.PriorityAttribute._Value">
            <summary>The value of this priority.</summary>
        </member>
        <member name="T:DaanV2.Compilers.CompilerContext`1">
            <summary>A base object containing the basic information needed for a compiling process.</summary>
            <typeparam name="TypeIn">The object type to compile.</typeparam>
        </member>
        <member name="M:DaanV2.Compilers.CompilerContext`1.#ctor(`0,System.String,DaanV2.PathType)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Compilers.CompilerContext`1"/>.</summary>
            <param name="ToCompile">The object to compile.</param>
            <param name="OutputPath">The output filepath/folder.</param>
            <param name="OutputType">Specifies what kind of path has been given.</param>
        </member>
        <member name="P:DaanV2.Compilers.CompilerContext`1.ObjectToProcess">
            <summary>The object to compile.</summary>
        </member>
        <member name="F:DaanV2.Compilers.CompilerContext`1._ObjectToProcess">
            <summary>The object to compile.</summary>
        </member>
        <member name="T:DaanV2.Compilers.DecompilerContext">
            <summary>The class responsible for giving the necessary information to decompile a file/folder.</summary>
        </member>
        <member name="M:DaanV2.Compilers.DecompilerContext.#ctor(System.String,DaanV2.PathType)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Compilers.DecompilerContext"/>.</summary>
            <param name="InputPath">The input path that points to a folder/file.</param>
            <param name="PathInputType">The type of path being inputted.</param>
        </member>
        <member name="P:DaanV2.Compilers.DecompilerContext.Path">
            <summary>Gets or sets the filepath/folder to the place that needs to be decompiled of this <see cref="T:DaanV2.Compilers.DecompilerContext"/>.</summary>
        </member>
        <member name="P:DaanV2.Compilers.DecompilerContext.PathType">
            <summary>Gets or sets the path type of this <see cref="T:DaanV2.Compilers.DecompilerContext"/>.</summary>
        </member>
        <member name="F:DaanV2.Compilers.DecompilerContext._Path">
            <summary>Gets or sets the filepath/folder to the place that needs to be decompiled of this <see cref="T:DaanV2.Compilers.DecompilerContext"/>.</summary>
        </member>
        <member name="F:DaanV2.Compilers.DecompilerContext._PathType">
            <summary>Gets or sets the path type of this <see cref="T:DaanV2.Compilers.DecompilerContext"/>.</summary>
        </member>
        <member name="T:DaanV2.Compilers.ICompilerContext`1">
            <summary>The interfaceresponsible for forming the contract on how compiler context should be used.</summary>
        </member>
        <member name="P:DaanV2.Compilers.ICompilerContext`1.ObjectToProcess">
            <summary>Gets or sets the object to process.</summary>
        </member>
        <member name="T:DaanV2.Compilers.ICompiler`2">
            <summary>The interface that is responsible for forming the contract on how compilers should transfer data between files and object with given context.</summary>
        </member>
        <member name="M:DaanV2.Compilers.ICompiler`2.Compile(DaanV2.Compilers.ICompilerContext{`0},`1)">
            <summary>Compiles the given object and context.</summary>
            <param name="Process">The object to compile.</param>
            <param name="Context">The context needed to compile the object.</param>
        </member>
        <member name="T:DaanV2.Compilers.ICompiler`1">
            <summary>The interface that is responsible for forming the contract on how compilers should transfer data between files and object.</summary>
            <typeparam name="TypeProcess">The type to be compiled.</typeparam>
        </member>
        <member name="M:DaanV2.Compilers.ICompiler`1.Compile(DaanV2.Compilers.ICompilerContext{`0})">
            <summary>Compiles the given context.</summary>
            <param name="Process">The information that is needed to compile.</param>
        </member>
        <member name="T:DaanV2.Compilers.IDecompilerContext">
            <summary>The interface responsible for forming the contract on how the Decompilers context should work.</summary>
        </member>
        <member name="P:DaanV2.Compilers.IDecompilerContext.Path">
            <summary>Get or sets the filepath/folderpath.</summary>
        </member>
        <member name="P:DaanV2.Compilers.IDecompilerContext.PathType">
            <summary>Gets or sets the path type.</summary>
        </member>
        <member name="T:DaanV2.Compilers.IDecompilerInto`2">
            <summary>The interface that responsible for how a decompiler should work.</summary>
            <typeparam name="TReceiver">The object type that can receive the output.</typeparam>
            <typeparam name="ContextType">The context type used to tell what to decompile.</typeparam>
        </member>
        <member name="M:DaanV2.Compilers.IDecompilerInto`2.DecompileInto(`1,`0)">
            <summary>Decompile the specified files into the receiver.</summary>
            <param name="Context">The context used to tell what to decompile.</param>
            <param name="Receiver">The object to receiver the output.</param>
        </member>
        <member name="T:DaanV2.Compilers.IDecompiler`2">
            <summary>The interface responsible for forming the contract on how Decompilers should work.</summary>
            <typeparam name="TypeTo">The type that needs to be returned.</typeparam>
            <typeparam name="TypeContext">The type that is used as context for processing.</typeparam>
        </member>
        <member name="M:DaanV2.Compilers.IDecompiler`2.Decompile(`1)">
            <summary>Decompiles the given context into the specified object.</summary>
            <param name="Context">The context that specifies where the information can be found.</param>
            <returns>Decompiles the given context into the specified object.</returns>
        </member>
        <member name="T:DaanV2.Compilers.IDecompiler`1">
            <summary>The interface responsible for forming the contract on how Decompilers should work.</summary>
            <typeparam name="TypeTo">The type that needs to be returned.</typeparam>
        </member>
        <member name="T:DaanV2.Converters.IConverter`3">
            <summary>The interface that is responsible for forming the contract on how Converters should work with context.</summary>
            <typeparam name="TypeFrom">The type that is going to be converted.</typeparam>
            <typeparam name="TypeTo">The returning type after conversion.</typeparam>
            <typeparam name="TypeContext">The context needed to convert.</typeparam>
        </member>
        <member name="M:DaanV2.Converters.IConverter`3.Convert(`0,`2)">
            <summary>Converts the given object into the specified type.</summary>
            <param name="Process">The object to convert.</param>
            <param name="Context">The context needed to convert  the object.</param>
            <returns>Converts the given object into the specified type.</returns>
        </member>
        <member name="T:DaanV2.Converters.IConverterInto`3">
            <summary>The interface responsible for forming the contract on how Converter should work with context.</summary>
            <typeparam name="TypeFrom">The object to convert into the specified type.</typeparam>
            <typeparam name="TypeTo">The type that is returned after conversion.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
        </member>
        <member name="M:DaanV2.Converters.IConverterInto`3.Convert(`0,`2,`1)">
            <summary>Convert the given object into the specified type.</summary>
            <param name="Process">The object to convert.</param>
            <param name="Context">The context needed to convert the given object.</param>
            <param name="Into">The object that receives the converted object.</param>
        </member>
        <member name="T:DaanV2.Converters.IConverterInto`2">
            <summary>The interface responsible for forming the contract on how converters should work.</summary>
            <typeparam name="TypeFrom">The type to convert.</typeparam>
            <typeparam name="TypeTo">The type that receives the given output.</typeparam>
        </member>
        <member name="M:DaanV2.Converters.IConverterInto`2.Convert(`0,`1)">
            <summary>Converts the given type into the specified class.</summary>
            <param name="Process">The object to convert.</param>
            <param name="Receiver">The object to receive the converted object.</param>
        </member>
        <member name="T:DaanV2.Converters.IConverter`2">
            <summary>The interface responsible for forming the contract on how Converter should work.</summary>
            <typeparam name="TypeFrom">The object to convert into the specified type.</typeparam>
            <typeparam name="TypeTo">The type that is returned after conversion.</typeparam>
        </member>
        <member name="M:DaanV2.Converters.IConverter`2.Convert(`0)">
            <summary>Converts the given object into the specified type.</summary>
            <param name="Process">The object to convert.</param>
            <returns>Converts the given object into the specified type.</returns>
        </member>
        <member name="T:DaanV2.PathType">
            <summary>A enumerator that helps indentifing what kind of path has been filled in.</summary>
        </member>
        <member name="F:DaanV2.PathType.File">
            <summary>Marks that the given path belongs to a file.</summary>
        </member>
        <member name="F:DaanV2.PathType.Folder">
            <summary>Marks that the given path is a folder.</summary>
        </member>
        <member name="T:DaanV2.ICopyable`1">
            <summary>The interface responsible for forming on how an object needs to be copied.</summary>
        </member>
        <member name="M:DaanV2.ICopyable`1.Copy">
            <summary>Return a new instance of this object.</summary>
            <returns>Return a new instance of this object.</returns>
        </member>
        <member name="T:DaanV2.IReplaceable`1">
            <summary>The interface responsible replacing the specified value with another.</summary>
            <typeparam name="T">The old and new type to replace.</typeparam>
        </member>
        <member name="T:DaanV2.IReplaceable`2">
            <summary>The interface responsible replacing the specified value with another.</summary>
            <typeparam name="TypeOld">The old type.</typeparam>
            <typeparam name="TypeNew">The new type.</typeparam>
        </member>
        <member name="M:DaanV2.IReplaceable`2.Replace(`0,`1)">
            <summary>Replaces the old value with the new value.</summary>
            <param name="OldValue">The old value to replace.</param>
            <param name="NewValue">The new value to insert.</param>
        </member>
        <member name="T:DaanV2.Processors.IDualProcessorOut`3">
            <summary>The interface responsible for determining how a pre/post processor should work.</summary>
            <typeparam name="TIn">The type to process.</typeparam>
            <typeparam name="TOut">The type that gets outputted.</typeparam>
            <typeparam name="TypeContext">The context needed to process.</typeparam>
        </member>
        <member name="T:DaanV2.Processors.IDualProcessorOut`2">
            <summary>The interface responsible for determining how a pre/post processor should work.</summary>
            <typeparam name="TIn">The type to process.</typeparam>
            <typeparam name="TOut">The type that gets outputted.</typeparam>
        </member>
        <member name="T:DaanV2.Processors.IDualProcessor`2">
            <summary>The interface responsible for determining how a pre/post processor should work.</summary>
            <typeparam name="T">The type to process.</typeparam>
            <typeparam name="TypeContext">The type that is used for the context.</typeparam>
        </member>
        <member name="T:DaanV2.Processors.IDualProcessor`1">
            <summary>The interface responsible for determining how a pre/post processor should work.</summary>
            <typeparam name="T">The type to process.</typeparam>
        </member>
        <member name="T:DaanV2.Processors.IPostProcessorOut`3">
            <summary>The interface responsible for detereming how a post processor should work.</summary>
        </member>
        <member name="M:DaanV2.Processors.IPostProcessorOut`3.Postprocess(`0,`2)">
            <summary>Post processes the given object with the context.</summary>
            <param name="Process">The object to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="T:DaanV2.Processors.IPostProcessorOut`2">
            <summary>The interface responsible for detereming how a post processor should work.</summary>
        </member>
        <member name="M:DaanV2.Processors.IPostProcessorOut`2.Postprocess(`0)">
            <summary>Post processes the given object.</summary>
            <param name="Process">The object to process.</param>
        </member>
        <member name="T:DaanV2.Processors.IPostProcessor`2">
            <summary>The interface responsible for detereming how a post processor should work.</summary>
        </member>
        <member name="M:DaanV2.Processors.IPostProcessor`2.Postprocess(`0,`1)">
            <summary>Post processes the given object with the given context.</summary>
            <param name="Process">The object to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="T:DaanV2.Processors.IPostProcessor`1">
            <summary>The interface responsible for determining how post processors should work.</summary>
        </member>
        <member name="M:DaanV2.Processors.IPostProcessor`1.Postprocess(`0)">
            <summary>Post processes the given object.</summary>
            <param name="Process">The object to process.</param>
        </member>
        <member name="T:DaanV2.Processors.IPreProcessorOut`3">
            <summary>The interface responsible for detereming how a pre processor should work.</summary>
        </member>
        <member name="M:DaanV2.Processors.IPreProcessorOut`3.Preprocess(`0,`2)">
            <summary>Pre processes the given object into the specified type.</summary>
            <param name="Process">The object to process.</param>
            <param name="Context">The context needed to process this object.</param>
        </member>
        <member name="T:DaanV2.Processors.IPreProcessorOut`2">
            <summary>The interface responsible for determining how a Pre processor with output should work.</summary>
        </member>
        <member name="M:DaanV2.Processors.IPreProcessorOut`2.Preprocess(`0)">
            <summary>Pre processes the specified object into the output object.</summary>
            <param name="Process">The object to pre processes.</param>
            <returns>Pre processes the specified object into the output object.</returns>
        </member>
        <member name="T:DaanV2.Processors.IPreProcessor`2">
            <summary>The interface responsible for forming the contract on how Pre processors should work.</summary>
            <typeparam name="T">The type of object to pre process.</typeparam>
            <typeparam name="TypeContext">The type of object used as context.</typeparam>
        </member>
        <member name="M:DaanV2.Processors.IPreProcessor`2.Preprocess(`0,`1)">
            <summary>Pre processes the given object.</summary>
            <param name="Process">The object to pre process.</param>
            <param name="Context">The context used to pre process.</param>
        </member>
        <member name="T:DaanV2.Processors.IPreProcessor`1">
            <summary>The interface responsible for determing how pre processor should work.</summary>
        </member>
        <member name="M:DaanV2.Processors.IPreProcessor`1.Preprocess(`0)">
            <summary>Pre processes the given object.</summary>
            <param name="Process">The object to preprocess.</param>
        </member>
        <member name="T:DaanV2.Processors.IProcessorOut`3">
            <summary>The interface responsible for Processors that have an output.</summary>
        </member>
        <member name="M:DaanV2.Processors.IProcessorOut`3.Process(`0,`2)">
            <summary>Processes the given object into the specified type.</summary>
            <param name="Process">The object to process.</param>
            <param name="Context">The context type needed to process.</param>
        </member>
        <member name="T:DaanV2.Processors.IProcessorOut`2">
            <summary>The interface responsible for processing the given object to the output.</summary>
        </member>
        <member name="M:DaanV2.Processors.IProcessorOut`2.Process(`0)">
            <summary>Processes the given object into the outputted type.</summary>
            <param name="Process">The object to process.</param>
            <returns>Processes the given object into the outputted type.</returns>
        </member>
        <member name="T:DaanV2.Processors.IProcessor`2">
            <summary>The interface responsible for forming on how an Processor should work with context.</summary>
        </member>
        <member name="M:DaanV2.Processors.IProcessor`2.Process(`0,`1)">
            <summary>Processes the specified object with the given context.</summary>
            <param name="Process">The object to process.</param>
            <param name="Context">The context used to process the given object.</param>
        </member>
        <member name="T:DaanV2.Processors.IProcessor`1">
            <summary>The interface that is responsible for determining how a processor should work.</summary>
        </member>
        <member name="M:DaanV2.Processors.IProcessor`1.Process(`0)">
            <summary>Processes the specified object.</summary>
            <param name="Process">The object to process.</param>
        </member>
        <member name="T:DaanV2.Processors.ProcessorExtension">
            <summary>The static class that extends processors.</summary>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Postprocess``2(DaanV2.Processors.IPostProcessor{``0,``1},``0[],``1)">
            <summary>Puts a collection of given items through the postprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Postprocess``2(DaanV2.Processors.IPostProcessor{``0,``1},System.Collections.Generic.IList{``0},``1)">
            <summary>Puts a collection of given items through the postprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Postprocess``2(DaanV2.Processors.IPostProcessor{``0,``1},System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>Puts a collection of given items through the postprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Postprocess``1(DaanV2.Processors.IPostProcessor{``0},``0[])">
            <summary>Puts a collection of given items through the postprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <returns>Puts a collection of given items through the processor.</returns>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Postprocess``1(DaanV2.Processors.IPostProcessor{``0},System.Collections.Generic.IList{``0})">
            <summary>Puts a collection of given items through the postprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <returns>Puts a collection of given items through the processor.</returns>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Postprocess``1(DaanV2.Processors.IPostProcessor{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Puts a collection of given items through the postprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <returns>Puts a collection of given items through the processor.</returns>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Preprocess``2(DaanV2.Processors.IPreProcessor{``0,``1},``0[],``1)">
            <summary>Puts a collection of given items through the preprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Preprocess``2(DaanV2.Processors.IPreProcessor{``0,``1},System.Collections.Generic.IList{``0},``1)">
            <summary>Puts a collection of given items through the preprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Preprocess``2(DaanV2.Processors.IPreProcessor{``0,``1},System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>Puts a collection of given items through the preprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Preprocess``1(DaanV2.Processors.IPreProcessor{``0},``0[])">
            <summary>Puts a collection of given items through the preprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <returns>Puts a collection of given items through the processor.</returns>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Preprocess``1(DaanV2.Processors.IPreProcessor{``0},System.Collections.Generic.IList{``0})">
            <summary>Puts a collection of given items through the preprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <returns>Puts a collection of given items through the processor.</returns>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Preprocess``1(DaanV2.Processors.IPreProcessor{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Puts a collection of given items through the preprocessor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <returns>Puts a collection of given items through the processor.</returns>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Process``2(DaanV2.Processors.IProcessor{``0,``1},``0[],``1)">
            <summary>Puts a collection of given items through the processor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Process``2(DaanV2.Processors.IProcessor{``0,``1},System.Collections.Generic.IList{``0},``1)">
            <summary>Puts a collection of given items through the processor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Process``2(DaanV2.Processors.IProcessor{``0,``1},System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>Puts a collection of given items through the processor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <typeparam name="TypeContext">The type of the context.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Processors.ProcessorExtension"/>.</summary>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Process``1(DaanV2.Processors.IProcessor{``0},``0[])">
            <summary>Puts a collection of given items through the processor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Process``1(DaanV2.Processors.IProcessor{``0},System.Collections.Generic.IList{``0})">
            <summary>Puts a collection of given items through the processor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
        </member>
        <member name="M:DaanV2.Processors.ProcessorExtension.Process``1(DaanV2.Processors.IProcessor{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Puts a collection of given items through the processor.</summary>
            <typeparam name="T">The type of object to process.</typeparam>
            <param name="Processor">The processor to use.</param>
            <param name="Items">The items to process.</param>
        </member>
        <member name="T:DaanV2.Serialization.BinarySerializer`1">
            <summary>The serializer class that is responsible for serializing to a binary format</summary>
        </member>
        <member name="M:DaanV2.Serialization.BinarySerializer`1.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.BinarySerializer`1"/>.</summary>
        </member>
        <member name="M:DaanV2.Serialization.BinarySerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserialize the given stream into the specified <see cref="!:TypeSerialize"/>.</summary>
            <param name="stream">The stream to read from.</param>
            <returns>Deserialize the given stream into the specified <see cref="!:TypeSerialize"/>.</returns>
        </member>
        <member name="M:DaanV2.Serialization.BinarySerializer`1.Serialize(`0,System.IO.Stream)">
            <summary>Serializes the given object into the given stream.</summary>
            <param name="O">The object to serialize.</param>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="F:DaanV2.Serialization.BinarySerializer`1._Serializer">
            <summary>The serializer used in the background.</summary>
        </member>
        <member name="T:DaanV2.Serialization.DeserializerAttribute">
            <summary>The attribute that marks a class that it is a deserializer and what factory it belongs to.</summary>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.DeserializerAttribute"/>.</summary>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.#ctor(System.String)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.DeserializerAttribute"/>.</summary>
            <param name="Name">FILL_ME_IN.</param>
        </member>
        <member name="P:DaanV2.Serialization.DeserializerAttribute.TypeId">
            <summary>When implemented in a derived class, gets a unique identifier for this attribute.</summary>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.Equals(System.Object)">
            <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
            <param name="obj">The object to check against.</param>
            <returns>Returns a value that indicates whether this instance is equal to a specified object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.Match(System.Object)">
            <summary>Check if this attribute matches the specified <see cref="T:System.Object"/>.</summary>
            <param name="obj">The object to compare to.</param>
            <returns>Check if this attribute matches the specified <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.ToString">
            <summary>Returns a string that represents this object.</summary>
            <returns>Returns a string that represents this object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.Equals(DaanV2.Serialization.DeserializerAttribute)">
            <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
            <param name="other">The object to check against.</param>
            <returns>Returns a value that indicates whether this instance is equal to a specified object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.op_Equality(DaanV2.Serialization.DeserializerAttribute,DaanV2.Serialization.DeserializerAttribute)">
            <summary>Compare two <see cref="T:DaanV2.Serialization.DeserializerAttribute"/> if they are equal to each other.</summary>
            <param name="left">The first <see cref="T:DaanV2.Serialization.DeserializerAttribute"/> to check.</param>
            <param name="right">The second <see cref="T:DaanV2.Serialization.DeserializerAttribute"/> to check.</param>
            <returns>Compare two <see cref="T:DaanV2.Serialization.DeserializerAttribute"/> if they are equal to each other.</returns>
        </member>
        <member name="M:DaanV2.Serialization.DeserializerAttribute.op_Inequality(DaanV2.Serialization.DeserializerAttribute,DaanV2.Serialization.DeserializerAttribute)">
            <summary>Compare two <see cref="T:DaanV2.Serialization.DeserializerAttribute"/> if they are not equal to each other.</summary>
            <param name="left">The first <see cref="T:DaanV2.Serialization.DeserializerAttribute"/> to check.</param>
            <param name="right">The second <see cref="T:DaanV2.Serialization.DeserializerAttribute"/> to check.</param>
            <returns>Compare two <see cref="T:DaanV2.Serialization.DeserializerAttribute"/> if they are not equal to each other.</returns>
        </member>
        <member name="P:DaanV2.Serialization.DeserializerAttribute.FactoryName">
            <summary>The name of the factory this class belongs to.</summary>
        </member>
        <member name="F:DaanV2.Serialization.DeserializerAttribute._FactoryName">
            <summary>The name of the factory this class belongs to.</summary>        
        </member>
        <member name="T:DaanV2.Serialization.JSONSerializer`1">
            <summary>A class that contects the build in JSON serializer from .Net into the <see cref="T:DaanV2.Serialization.Serialization"/>.</summary>
            <typeparam name="TypeSerialize">The type to serializer/deserialize.</typeparam>
        </member>
        <member name="M:DaanV2.Serialization.JSONSerializer`1.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.JSONSerializer`1"/>.</summary>
        </member>
        <member name="M:DaanV2.Serialization.JSONSerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserialize the given stream into the specified <see cref="T:System.Type"/>.</summary>
            <param name="stream">The stream to read from.</param>
            <returns>Deserialize the given stream into the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:DaanV2.Serialization.JSONSerializer`1.Serialize(`0,System.IO.Stream)">
            <summary>Serializes the given object into the given stream.</summary>
            <param name="O">The object to serialize.</param>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="F:DaanV2.Serialization.JSONSerializer`1._Options">
            <summary>The options to be used when generating a serializer.</summary>
        </member>
        <member name="T:DaanV2.Serialization.SerializationFactory">
            <summary>The basic serialization factory that allows for creation of (de)serializer of a generic type.</summary>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.#ctor(System.String)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.SerializationFactory"/>.</summary>
            <param name="Name">The name of this factory.</param>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.SerializationFactory"/>.</summary>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.GetDeserializer``1">
            <summary>Returns a deserializer that is able to deserializer the given object.</summary>
            <typeparam name="TOut">The type that needs to be returned after deserializing.</typeparam>
            <returns>Returns a deserializer that is able to deserializer the given object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.GetSerializer``1">
            <summary>Returns a serializer that is able to serializer the given object.</summary>
            <typeparam name="TIn">The type that is being inputted for serialization.</typeparam>
            <returns>Returns a serializer that is able to serializer the given object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.GetSerializer(System.Type)">
            <summary>Returns a serializer that is able to serializer the given object.</summary>
            <param name="ForType">The type that is being inputted for serialization.</param>
            <returns>Returns a serializer that is able to serializer the given object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.GetDeserializeType">
            <summary>Gets the deserializing base type.</summary>
            <returns>Gets the deserializing base type.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.GetSerializeType">
            <summary>Gets the serializing base type.</summary>
            <returns>Gets the serializing base type.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.SetDeserializeType(System.Type)">
            <summary>Sets the deserializing base type.</summary>
            <param name="Deserialize">The type to set as the base for deserializers.</param>
        </member>
        <member name="M:DaanV2.Serialization.SerializationFactory.SetSerializeType(System.Type)">
            <summary>Sets the serializing base type.</summary>
            <param name="Serialize">The type to set as the base for serializers.</param>
        </member>
        <member name="P:DaanV2.Serialization.SerializationFactory.Name">
            <summary>The name of this factory.</summary>
        </member>
        <member name="P:DaanV2.Serialization.SerializationFactory.Deserializer">
            <summary>The type of the deserializer.</summary>
        </member>
        <member name="P:DaanV2.Serialization.SerializationFactory.Serializer">
            <summary>The type of the serializer.</summary>
        </member>
        <member name="F:DaanV2.Serialization.SerializationFactory._Name">
            <summary>The name of this factory.</summary>
        </member>
        <member name="F:DaanV2.Serialization.SerializationFactory._Deserializer">
            <summary>The type of the deserializer.</summary>
        </member>
        <member name="F:DaanV2.Serialization.SerializationFactory._Serializer">
            <summary>The type of the serializer.</summary>
        </member>
        <member name="T:DaanV2.Serialization.SerializerAttribute">
            <summary>The attribute that marks a class that it is a serializer and what factory it belongs to.</summary>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.SerializerAttribute"/>.</summary>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.#ctor(System.String)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.SerializerAttribute"/>.</summary>
            <param name="Name">The name of the factory.</param>
        </member>
        <member name="P:DaanV2.Serialization.SerializerAttribute.TypeId">
            <summary>When implemented in a derived class, gets a unique identifier for this attribute.</summary>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.Equals(System.Object)">
            <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
            <param name="obj">The object to check against.</param>
            <returns>Returns a value that indicates whether this instance is equal to a specified object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.Match(System.Object)">
            <summary>Check if this attribute matches the specified <see cref="T:System.Object"/>.</summary>
            <param name="obj">The object to compare to.</param>
            <returns>Check if this attribute matches the specified <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.ToString">
            <summary>Returns a string that represents this object.</summary>
            <returns>Returns a string that represents this object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.Equals(DaanV2.Serialization.SerializerAttribute)">
            <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
            <param name="other">The object to check against.</param>
            <returns>Returns a value that indicates whether this instance is equal to a specified object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>Returns the hash code for this instance.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.op_Equality(DaanV2.Serialization.SerializerAttribute,DaanV2.Serialization.SerializerAttribute)">
            <summary>Compare two <see cref="T:System.SerializableAttribute"/> if they are equal to each other.</summary>
            <param name="left">The first <see cref="T:System.SerializableAttribute"/> to check.</param>
            <param name="right">The second <see cref="T:System.SerializableAttribute"/> to check.</param>
            <returns>Compare two <see cref="T:System.SerializableAttribute"/> if they are equal to each other.</returns>
        </member>
        <member name="M:DaanV2.Serialization.SerializerAttribute.op_Inequality(DaanV2.Serialization.SerializerAttribute,DaanV2.Serialization.SerializerAttribute)">
            <summary>Compare two <see cref="T:System.SerializableAttribute"/> if they are not equal to each other.</summary>
            <param name="left">The first <see cref="T:System.SerializableAttribute"/> to check.</param>
            <param name="right">The second <see cref="T:System.SerializableAttribute"/> to check.</param>
            <returns>Compare two <see cref="T:System.SerializableAttribute"/> if they are not equal to each other.</returns>
        </member>
        <member name="P:DaanV2.Serialization.SerializerAttribute.FactoryName">
            <summary>The name of the factory that this class belongs to.</summary>
        </member>
        <member name="F:DaanV2.Serialization.SerializerAttribute._FactoryName">
            <summary>The name of the factory that this class belongs to.</summary>
        </member>
        <member name="T:DaanV2.Serialization.XmlSerializer`1">
            <summary>A class that contects the build in JSON serializer from .Net into the <see cref="T:DaanV2.Serialization.Serialization"/>.</summary>
            <typeparam name="TypeSerialize">The type to serializer/deserialize.</typeparam>
        </member>
        <member name="M:DaanV2.Serialization.XmlSerializer`1.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.XmlSerializer`1"/>.</summary>
        </member>
        <member name="M:DaanV2.Serialization.XmlSerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserialize the given stream into the specified object.</summary>
            <param name="stream">The strean to read the object from.</param>
            <returns>Deserialize the given stream into the specified object.</returns>
        </member>
        <member name="M:DaanV2.Serialization.XmlSerializer`1.Serialize(`0,System.IO.Stream)">
            <summary>Serialize the given object in the given stream.</summary>
            <param name="O">The object to serialize.</param>
            <param name="stream">The stream to write the object to.</param>
        </member>
        <member name="F:DaanV2.Serialization.XmlSerializer`1._Serializer">
            <summary>The given xml serializer that connects to the interface.</summary>
        </member>
        <member name="T:DaanV2.Serialization.IDeserializer`3">
            <summary>The interface that is responsible for forming the contract on how Deserializer should work.</summary>
            <typeparam name="TypeOut">The type to be returned after deserializing.</typeparam>
            <typeparam name="TypeStream">The type of the stream to be used.</typeparam>
            <typeparam name="TypeContext">The context needed for deserializing.</typeparam>
        </member>
        <member name="M:DaanV2.Serialization.IDeserializer`3.Deserialize(`1,`2)">
            <summary>Deserializer the given stream into the specified type.</summary>
            <param name="stream">The stream to read from.</param>
            <param name="Context">The context needed to read the stream.</param>
            <returns>Deserializer the given stream into the specified type.</returns>
        </member>
        <member name="T:DaanV2.Serialization.IDeserializer`2">
            <summary>The interfacethat is responsible for forming the contract on how Deserializer should work.</summary>
            <typeparam name="TypeOut">The type that needs to be returned after deserializing.</typeparam>
            <typeparam name="TypeStream">The type that is used as the data stream.</typeparam>
        </member>
        <member name="M:DaanV2.Serialization.IDeserializer`2.Deserialize(`1)">
            <summary>Deserialize the given stream into the specified <see cref="T:System.Type"/>.</summary>
            <param name="stream">The stream to read from.</param>
            <returns>Deserialize the given stream into the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:DaanV2.Serialization.ISerializerFactory`1">
            <summary>The interface responsible for form the contract on what a SerializerFactory should contain.</summary>
            <typeparam name="TypeStream">The type of stream used by the serializers.</typeparam>
        </member>
        <member name="M:DaanV2.Serialization.ISerializerFactory`1.GetSerializer``1">
            <summary>Returns a serializer that is able to serialize the given type through the given stream.</summary>
            <typeparam name="TIn">The type to create a serializer for.</typeparam>
            <returns>Returns a serializer that is able to serialize the given type through the given stream.</returns>
        </member>
        <member name="M:DaanV2.Serialization.ISerializerFactory`1.GetDeserializer``1">
            <summary>Returns a deserializer that is able to deserialize the given type through the given stream.</summary>
            <typeparam name="TOut">The type to create a deserializer for.</typeparam>
            <returns>Returns a deserializer that is able to deserialize the given type through the given stream.</returns>
        </member>
        <member name="M:DaanV2.Serialization.ISerializerFactory`1.SetDeserializeType(System.Type)">
            <summary>Sets the deserializer type.</summary>
            <param name="Deserializer">The type to set as the deserializer.</param>
        </member>
        <member name="M:DaanV2.Serialization.ISerializerFactory`1.SetSerializeType(System.Type)">
            <summary>Sets the serializer type.</summary>
            <param name="Serializer">The type to set as the serializer.</param>
        </member>
        <member name="M:DaanV2.Serialization.ISerializerFactory`1.GetDeserializeType">
            <summary>Gets the deserializer.</summary>
        </member>
        <member name="M:DaanV2.Serialization.ISerializerFactory`1.GetSerializeType">
            <summary>Gets the serializer type.</summary>
        </member>
        <member name="P:DaanV2.Serialization.ISerializerFactory`1.Name">
            <summary>Gets the name of the serializer factory.</summary>
        </member>
        <member name="T:DaanV2.Serialization.ISerializer`3">
            <summary>The interface that is responsible for forming the contract on how serializers should work.</summary>
            <typeparam name="TypeIn">The type that is being serializied.</typeparam>
            <typeparam name="TypeStream">The stream type used to write the given type.</typeparam>
            <typeparam name="TypeContext">The context needed to serialize the given type.</typeparam>
        </member>
        <member name="M:DaanV2.Serialization.ISerializer`3.Serialize(`0,`1,`2)">
            <summary>Serializes the given object into the given stream along with the context needed to serialize.</summary>
            <param name="O">The object to serialize.</param>
            <param name="stream">The stream to write the given object into.</param>
            <param name="Context">The context that is needed to the serialize the given object.</param>
        </member>
        <member name="T:DaanV2.Serialization.ISerializer`2">
            <summary>The interface that is responsible for forming the contract on how serializers should work.</summary>
            <typeparam name="TypeIn">The input type.</typeparam>
            <typeparam name="TypeStream">The stream type.</typeparam>
        </member>
        <member name="M:DaanV2.Serialization.ISerializer`2.Serialize(`0,`1)">
            <summary>Serializes the given object into the given stream.</summary>
            <param name="O">The object to serialize.</param>
            <param name="stream">The stream to write the object into.</param>
        </member>
        <member name="T:DaanV2.Serialization.Serialization">
            <summary>The class that holds all the serializer factories.</summary>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.Add(DaanV2.Serialization.ISerializerFactory{System.IO.Stream})">
            <summary>Add the given factory into the internal list.</summary>
            <param name="Factory">The factory to add.</param>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.Add(System.Reflection.Assembly[])">
            <summary>Add the contents of assemblies to the internal list of factories.</summary>
            <param name="assemblies">The assemblies to loop through.</param>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.Add(System.Reflection.Assembly)">
            <summary>Add the contents of a assembly to the internal list of factories.</summary>
            <param name="assembly">The assembly to look through.</param>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.GetFactoryNames">
            <summary>Returns a list of names of all factories currently in the internal list.</summary>
            <returns>Returns a list of names of all factories currently in the internal list.</returns>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.GetFactory(System.String)">
            <summary>Returns the factory with the specified name
            <para>If no factory is found, then one is made.</para>.</summary>
            <param name="Name">The name of the specified name.</param>
            <returns>Returns the factory with the specified name.</returns>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.GetDeserializer``1(System.String)">
            <summary>Returns a deserializer from the specified factory.</summary>
            <typeparam name="TypeOut">The type to deserializer.</typeparam>
            <param name="FactoryName">The name of the factory to usee.</param>
            <returns>A deserializer of type <see cref="T:DaanV2.Serialization.IDeserializer`2"/>.</returns>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.GetSerializer``1(System.String)">
            <summary>Returns a serializer from the specified factory.</summary>
            <typeparam name="TypeIn">The type to serializer.</typeparam>
            <param name="FactoryName">The name of the factory to usee.</param>
            <returns>A serializer of type <see cref="T:DaanV2.Serialization.ISerializer`2"/>.</returns>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Serialization.Serialization"/>.</summary>
        </member>
        <member name="P:DaanV2.Serialization.Serialization.Factories">
            <summary>The internal list of factories.</summary>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.Serialize``1(``0,System.String,System.String)">
            <summary>Serializes the given object into the specified file using the specified factory.</summary>
            <param name="O">The object to serialization.</param>
            <param name="FactoryName">The name of the factory, <see cref="M:DaanV2.Serialization.Serialization.GetFactoryNames"/>.</param>
            <param name="Filepath">The file to write.</param>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.Serialize``1(``0,System.String,System.IO.Stream)">
            <summary>Serializes the given object into the specified file using the specified factory.</summary>
            <param name="O">The object to serialization.</param>
            <param name="FactoryName">The name of the factory, <see cref="M:DaanV2.Serialization.Serialization.GetFactoryNames"/>.</param>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.Deserialize``1(System.String,System.String)">
            <summary>Deserializes the given file into the specified object using the specified factory.</summary>
            <typeparam name="T">The object to return to.</typeparam>
            <param name="FactoryName">The name of the factory, <see cref="M:DaanV2.Serialization.Serialization.GetFactoryNames"/>.</param>
            <param name="Filepath">The file to read from.</param>
            <returns>Deserializes the given file into the specified object using the specified factory.</returns>
        </member>
        <member name="M:DaanV2.Serialization.Serialization.Deserialize``1(System.String,System.IO.Stream)">
            <summary>Deserializes the given file into the specified object using the specified factory.</summary>
            <typeparam name="T">The object to return to.</typeparam>
            <param name="FactoryName">The name of the factory, <see cref="M:DaanV2.Serialization.Serialization.GetFactoryNames"/>.</param>
            <param name="stream">The stream to read from.</param>
            <returns>Deserializes the given file into the specified object using the specified factory.</returns>
        </member>
        <member name="F:DaanV2.Serialization.Serialization._Factories">
            <summary>The internal list of factories.</summary>
        </member>
        <member name="T:DaanV2.CollectionExtension">
            <summary>Extens different collection code.</summary>
        </member>
        <member name="M:DaanV2.CollectionExtension.ToList``1(``0[])">
            <summary>Casts the given array to a list.</summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="Values">The array to cast.</param>
            <returns>Casts the given array to a list.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.ToList``1(System.Collections.Generic.IList{``0})">
            <summary>Casts the given array to a list.</summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="Values">The array to cast.</param>
            <returns>Casts the given array to a list.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.Contains``1(``0[],``0)">
            <summary>Checks if an array contains the specified object.</summary>
            <typeparam name="T">The type of object the array exists of.</typeparam>
            <param name="Collection">The collection to search through.</param>
            <param name="Value">The value to find.</param>
            <returns>Checks if an array contains the specified object.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.Contains``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Checks if an list contains the specified object.</summary>
            <typeparam name="T">The type of object the array exists of.</typeparam>
            <param name="Collection">The collection to search through.</param>
            <param name="Value">The value to find.</param>
            <returns>Checks if an list contains the specified object.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.Copy``1(System.Collections.Generic.List{``0})">
            <summary>Returns a copy of the whole list.</summary>
            <typeparam name="T">The type of element in the list that implements <see cref="T:DaanV2.ICopyable`1"/>.</typeparam>
            <param name="values">the list of values to be copied.</param>
            <returns>Returns a copy of the whole list.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.Copy``1(``0[])">
            <summary>Returns a copy of the whole array.</summary>
            <typeparam name="T">The type of element in the array that implements <see cref="T:DaanV2.ICopyable`1"/>.</typeparam>
            <param name="values">the array of values to be copied.</param>
            <returns>Returns a copy of the whole array.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.Copy``1(System.Collections.Generic.IList{``0})">
            <summary>Returns a copy of the whole list.</summary>
            <typeparam name="T">The type of element in the list that implements <see cref="T:DaanV2.ICopyable`1"/>.</typeparam>
            <param name="values">the list of values to be copied.</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.CollectionExtension"/>.</summary>
        </member>
        <member name="M:DaanV2.CollectionExtension.Replace``3(``0[],``1,``2)">
            <summary>Replaces value inside the array.</summary>
            <typeparam name="TCollection">The type used for the collection.</typeparam>
            <typeparam name="TypeOld">The old type.</typeparam>
            <typeparam name="TypeNew">The new type.</typeparam>
            <param name="Values">The values to loop through.</param>
            <param name="Old">The value to replace.</param>
            <param name="New">The value to add into.</param>
        </member>
        <member name="M:DaanV2.CollectionExtension.Replace``3(System.Collections.Generic.IList{``0},``1,``2)">
            <summary>Replaces value inside the list.</summary>
            <typeparam name="TCollection">The type used for the collection.</typeparam>
            <typeparam name="TypeOld">The old type.</typeparam>
            <typeparam name="TypeNew">The new type.</typeparam>
            <param name="Values">The values to loop through.</param>
            <param name="Old">The value to replace.</param>
            <param name="New">The value to add into.</param>
        </member>
        <member name="M:DaanV2.CollectionExtension.Replace``4(System.Collections.Generic.IDictionary{``0,``1},``2,``3)">
            <summary>Replaces value inside the list.</summary>
            <typeparam name="TKey">The type used for the key.</typeparam>
            <typeparam name="TCollection">The type used for the collection.</typeparam>
            <typeparam name="TypeOld">The old type.</typeparam>
            <typeparam name="TypeNew">The new type.</typeparam>
            <param name="Values">The values to loop through.</param>
            <param name="Old">The value to replace.</param>
            <param name="New">The value to add into.</param>
        </member>
        <member name="M:DaanV2.CollectionExtension.Copy(System.Collections.Generic.List{System.String})">
            <summary>Returns a copy of the whole list.</summary>
            <param name="values">The list of values to copy.</param>
            <returns>Returns a copy of the whole list.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.Copy(System.String[])">
            <summary>Returns a copy of the whole array.</summary>
            <param name="values">The array of values to copy.</param>
            <returns>Returns a copy of the whole array.</returns>
        </member>
        <member name="M:DaanV2.CollectionExtension.Replace(System.String[],System.String,System.String)">
            <summary>Replaces value inside the array.</summary>
            <param name="Values">The values to loop through.</param>
            <param name="Old">The value to replace.</param>
            <param name="New">The value to add into.</param>
        </member>
        <member name="M:DaanV2.CollectionExtension.Replace(System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>Replaces value inside the list.</summary>
            <param name="Values">The values to loop through.</param>
            <param name="Old">The value to replace.</param>
            <param name="New">The value to add into.</param>
        </member>
        <member name="T:DaanV2.Parallel">
            <summary>The class that creates Parallel tasks.</summary>
            <summary>The class that creates Parallel tasks.</summary>
        </member>
        <member name="M:DaanV2.Parallel.ForEach``1(``0[],System.Action{``0})">
            <summary>Loops over each item in the specified array.</summary>
            <typeparam name="T">The type inside the array.</typeparam>
            <param name="Items">The items to loop over.</param>
            <param name="action">The action to preform on each item.</param>
            <returns>Loops over each item in the specified array.</returns>
        </member>
        <member name="M:DaanV2.Parallel.ForEach``1(``0[],System.Action{``0},System.Int32)">
            <summary>Loops over each item in the specified array.</summary>
            <typeparam name="T">The type inside the array.</typeparam>
            <param name="Items">The items to loop over.</param>
            <param name="action">The action to preform on each item.</param>
            <param name="TaskCount">The amount of tasks that should process over this array.</param>
            <returns>Loops over each item in the specified array.</returns>
        </member>
        <member name="M:DaanV2.Parallel.ForEach``2(``0[],System.Action{``0,``1},``1)">
            <summary>Loops over each item in the specified array.</summary>
            <typeparam name="T">The type inside the array.</typeparam>
            <typeparam name="T1">The type used for the additional information.</typeparam>
            <param name="Items">The items to loop over.</param>
            <param name="action">The action to preform on each item.</param>
            <param name="Argument">The object needed to process each other object.</param>
            <returns>Loops over each item in the specified array.</returns>
        </member>
        <member name="M:DaanV2.Parallel.ForEach``2(``0[],System.Action{``0,``1},``1,System.Int32)">
            <summary>Loops over each item in the specified array.</summary>
            <typeparam name="T">The type inside the array.</typeparam>
            <typeparam name="T1">The type used for the additional information.</typeparam>
            <param name="Items">The items to loop over.</param>
            <param name="action">The action to preform on each item.</param>
            <param name="Argument">The object needed to process each other object.</param>
            <param name="TaskCount">The amount of tasks that should process over this array.</param>
            <returns>Loops over each item in the specified array.</returns>
        </member>
        <member name="M:DaanV2.Parallel.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})">
            <summary>Loops over each item in the specified <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <typeparam name="T">The type inside the <see cref="T:System.Collections.Generic.ICollection`1" />.</typeparam>
            <param name="Items">The items to loop over.</param>
            <param name="action">The action to preform on each item.</param>
            <returns>Loops over each item in the specified <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:DaanV2.Parallel.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Int32)">
            <summary>Loops over each item in the specified <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <typeparam name="T">The type inside the <see cref="T:System.Collections.Generic.ICollection`1" />.</typeparam>
            <param name="Items">The items to loop over.</param>
            <param name="action">The action to preform on each item.</param>
            <param name="TaskCount">The amount of tasks that should process over this <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>Loops over each item in the specified <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:DaanV2.Parallel.ForEach``2(System.Collections.Generic.ICollection{``0},System.Action{``0,``1},``1)">
            <summary>Loops over each item in the specified <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <typeparam name="T">The type inside the <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <typeparam name="T1">The additional argument type.</typeparam>
            <param name="Items">The items to loop over.</param>
            <param name="action">The action to preform on each item.</param>
            <param name="Argument">The additional argument needed to process the item.</param>
            <returns>Loops over each item in the specified <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:DaanV2.Parallel.ForEach``2(System.Collections.Generic.ICollection{``0},System.Action{``0,``1},``1,System.Int32)">
            <summary>Loops over each item in the specified <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <typeparam name="T">The type inside the <see cref="T:System.Collections.Generic.ICollection`1" />.</typeparam>
            <typeparam name="T1">The additional argument type.</typeparam>
            <param name="Items">The items to loop over.</param>
            <param name="action">The action to preform on each item.</param>
            <param name="TaskCount">The amount of tasks that should process over this <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <param name="Argument">The additional argument needed to process the item.</param>
            <returns>Loops over each item in the specified <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:DaanV2.Parallel.ForEachInternal``1(DaanV2.ParallelContext{``0})">
            <summary>The internal method used for the foreach loop.</summary>
            <typeparam name="T">The object to process.</typeparam>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="M:DaanV2.Parallel.ForEachInternal``2(DaanV2.ParallelContext{``0,``1})">
            <summary>The internal method used for the foreach loop.</summary>
            <typeparam name="T">The object to process.</typeparam>
            <typeparam name="T1">The additional type to process.</typeparam>
            <param name="Context">The context needed to process.</param>
        </member>
        <member name="T:DaanV2.StringExtension">
            <summary>The static class that add upon existing code.</summary>
        </member>
        <member name="M:DaanV2.StringExtension.Copy(System.String)">
            <summary>Creates a copy of the specified string.</summary>
            <param name="Value">The string to copy.</param>
            <returns>Creates a copy of the specified string.</returns>
        </member>
        <member name="T:DaanV2.TaskExtension">
            <summary>The static class thats extends op on existing task code.</summary>
        </member>
        <member name="M:DaanV2.TaskExtension.WaitAll(System.Threading.Tasks.Task[])">
            <summary>Waits for all tasks to finish.</summary>
            <param name="Tasks">The array of tasks to wait for.</param>
        </member>
        <member name="M:DaanV2.TaskExtension.WaitAny(System.Threading.Tasks.Task[])">
            <summary>Waits for any of the tasks to finish.</summary>
            <param name="Tasks">The array of tasks to wait for.</param>
        </member>
        <member name="T:DaanV2.TypeExtension">
            <summary>The class that extends op on the existing type code.</summary>
            <summary>The class responsible for extending the possiblies of the <see cref="T:System.Type"/> class.</summary>
        </member>
        <member name="M:DaanV2.TypeExtension.ContainsInterface(System.Type,System.Type)">
            <summary>Checks if the given type implement the given interface type.</summary>
            <param name="Object">The object to look through.</param>
            <param name="Contains">The interface type to find.</param>
            <returns>Checks if the given type implement the given interface type.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.ContainsAttribute(System.Type,System.Type,System.Boolean)">
            <summary>Checks if the specified type contains a type of attribute.</summary>
            <param name="Object">The object to look through.</param>
            <param name="Contains">The type to find in attributes.</param>
            <param name="Inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events.</param>
            <returns>Checks if the specified type contains a type of attribute.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetAttribute(System.Type,System.Type)">
            <summary>Returns the specified attribute.</summary>
            <param name="Object">The object to retrieve attributes from.</param>
            <param name="Value">The type of the attribute to return.</param>
            <returns>Returns the specified attribute.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetAttribute``1(System.Type)">
            <summary>Returns the specified attribute.</summary>
            <param name="Object">The object to retrieve attributes from.</param>
            <typeparam name="T">The type of the attribute to return.</typeparam>
            <returns>Returns the specified attribute.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetAttributes(System.Type,System.Type)">
            <summary>Returns the specified attributes.</summary>
            <param name="Object">The object to retrieve attributes from.</param>
            <param name="Value">The type of the attribute to return.</param>
            <returns>Returns the specified attributes.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetAttributes``1(System.Type)">
            <summary>Returns the specified attributes.</summary>
            <param name="Object">The object to retrieve attributes from.</param>
            <typeparam name="T">The type of the attribute to return.</typeparam>
            <returns>Returns the specified attributes.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetObjectsWhichImplements(System.Type)">
            <summary>Returns a list of object that implements a specified type.</summary>
            <param name="Contains">The type to search for.</param>
            <returns>Returns a list of object that implements a specified type.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetObjectsWhichImplements``1">
            <summary>Returns a list of object that implements a specified type.</summary>
            <returns>Returns a list of object that implements a specified type.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetObjectsWhichImplements(System.Type,System.Reflection.Assembly)">
            <summary>Returns a list of object that implements a specified type.</summary>
            <param name="Contains">The type to search for.</param>
            <param name="asm">The assemblies to look through.</param>
            <returns>Returns a list of object that implements a specified type.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetObjectsWhichImplements``1(System.Reflection.Assembly)">
            <summary>Returns a list of object that implements a specified type.</summary>
            <param name="asm">The assemblies to look through.</param>
            <typeparam name="T">The type to find.</typeparam>
            <returns>Returns a list of object that implements a specified type.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetTypesWhichImplements(System.Type)">
            <summary>Returns a list of types that implement the specified implement.</summary>
            <param name="Implements">The type that should be implemented.</param>
            <returns>Returns a list of types that implement the specified implement.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.GetTypesWhichImplements(System.Type,System.Reflection.Assembly)">
            <summary>Returns a list of types that implement the specified implement.</summary>
            <param name="Implements">The type that should be implemented.</param>
            <param name="asm">the assemblies to look through.</param>
            <returns>Returns a list of types that implement the specified implement.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.Implements(System.Type,System.Type)">
            <summary>Check if the given type implements the specified type.</summary>
            <param name="Value">The value to check if it implements the specified type.</param>
            <param name="Contains">The type to find.</param>
            <returns>Check if the given type implements the specified type.</returns>
        </member>
        <member name="M:DaanV2.TypeExtension.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.TypeExtension"/>.</summary>
        </member>
        <member name="T:DaanV2.ParallelContext`1">
            <summary>The context needed to perform a Parallel action over an array of type <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:DaanV2.ParallelContext`1.#ctor(System.Int32,System.Int32,`0[],System.Action{`0})">
            <summary>Creates a new instance of <see cref="T:DaanV2.ParallelContext`1"/>.</summary>
            <param name="StartIndex">The index to start at.</param>
            <param name="EndIndex">The index to stop.</param>
            <param name="Items">The array to loop over.</param>
            <param name="action">The action to perform on each item.</param>
        </member>
        <member name="F:DaanV2.ParallelContext`1._StartIndex">
            <summary>The index to start from.</summary>
        </member>
        <member name="F:DaanV2.ParallelContext`1._EndIndex">
            <summary>The index to stop.</summary>
        </member>
        <member name="F:DaanV2.ParallelContext`1._Items">
            <summary>The array to loop through.</summary>
        </member>
        <member name="F:DaanV2.ParallelContext`1._Action">
            <summary>The action to perform on each item.</summary>
        </member>
        <member name="T:DaanV2.ParallelContext`2">
            <summary>The context needed to perform a Parallel action over an array of type <typeparamref name="T1"/>.</summary>
        </member>
        <member name="M:DaanV2.ParallelContext`2.#ctor(System.Int32,System.Int32,`0[],System.Action{`0,`1},`1)">
            <summary>Creates a new instance of <see cref="T:DaanV2.ParallelContext`2"/>.</summary>
            <param name="StartIndex">The index to start at.</param>
            <param name="EndIndex">The index to stop.</param>
            <param name="Items">The array to loop over.</param>
            <param name="action">The action to perform on each item.</param>
            <param name="Argument1">The context argument to pass along.</param>
        </member>
        <member name="F:DaanV2.ParallelContext`2._StartIndex">
            <summary>The index to start from.</summary>
        </member>
        <member name="F:DaanV2.ParallelContext`2._EndIndex">
            <summary>The index to stop.</summary>
        </member>
        <member name="F:DaanV2.ParallelContext`2._Items">
            <summary>The array to loop through.</summary>
        </member>
        <member name="F:DaanV2.ParallelContext`2._Action">
            <summary>The action perform on the array's items.</summary>
        </member>
        <member name="F:DaanV2.ParallelContext`2._Argument1">
            <summary>The argument to pass along as context.</summary>
        </member>
        <member name="T:DaanV2.ParallelContextCollection`1">
            <summary>The context needed to perform a Parallel action over an array of type <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:DaanV2.ParallelContextCollection`1.#ctor(System.Int32,System.Int32,System.Collections.Generic.ICollection{`0},System.Action{`0})">
            <summary>Creates a new instance of <see cref="T:DaanV2.ParallelContext`1"/>.</summary>
            <param name="StartIndex">The index to start at.</param>
            <param name="EndIndex">The index to stop.</param>
            <param name="Items">The array to loop over.</param>
            <param name="action">The action to perform on each item.</param>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`1._StartIndex">
            <summary>The index to start from.</summary>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`1._EndIndex">
            <summary>The index to stop.</summary>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`1._Items">
            <summary>The action perform on the array's items.</summary>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`1._Action">
            <summary>The argument to pass along as context.</summary>
        </member>
        <member name="T:DaanV2.ParallelContextCollection`2">
            <summary>The context needed to perform a Parallel action over an array of type <typeparamref name="T1"/>.</summary>
        </member>
        <member name="M:DaanV2.ParallelContextCollection`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.ICollection{`0},System.Action{`0,`1},`1)">
            <summary>Creates a new instance of <see cref="T:DaanV2.ParallelContext`2"/>.</summary>
            <param name="StartIndex">The index to start at.</param>
            <param name="EndIndex">The index to stop.</param>
            <param name="Items">The array to loop over.</param>
            <param name="action">The action to perform on each item.</param>
            <param name="Argument1">The context argument to pass along.</param>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`2._StartIndex">
            <summary>The index to start from.</summary>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`2._EndIndex">
            <summary>The index to stop.</summary>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`2._Items">
            <summary>The array to loop through.</summary>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`2._Action">
            <summary>The action perform on the array's items.</summary>
        </member>
        <member name="F:DaanV2.ParallelContextCollection`2._Argument1">
            <summary>The argument to pass along as context.</summary>
        </member>
    </members>
</doc>
